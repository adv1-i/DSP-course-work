<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="com.obiscr.chatgpt.settings.EasyCodeState">
    <option name="projectFiles" value="$PROJECT_DIR$/src/main/java/com/example/courseworkgui/FFT2D.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/Fftw1Dimension.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/HelloController.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/HighPassFilter.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/ProjectionChart.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/ProjectionData.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/ProjectionViewer.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/com/example/courseworkgui/TransformData.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/src/main/java/module-info.java;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui/pom.xml" />
    <option name="forceFullIndex" value="false" />
    <option name="fileSummaryMaps" value="{&quot;C:/Users/adv1e/IdeaProjects/FourierWithFFTW3/CourseWorkGui&quot;:&quot;{\&quot;/src/main/java/com/example/courseworkgui/HighPassFilter.java\&quot;:\&quot;This Java file defines a HighPassFilter class that applies a high-pass filter to an input signal.\\n\\nThe key functions are:\\n\\n- Constructor HighPassFilter(double D0) - Takes in the cutoff distance parameter D0 for the filter. \\n\\n- applyFilter(double[] F) - Applies the high-pass filter to the input signal array F and returns the filtered output signal array. \\n\\n- It first creates a filter array H of the same length as the input, where each element is 0 if the index is within the cutoff distance D0 of the center, and 1 otherwise. \\n\\n- It then loops through and multiplies each element of the input F by the corresponding element in the filter array H, effectively removing low frequency components within the cutoff distance.\\n\\n- The applyFilter method is the main function that performs the actual filtering operation on the input signal.\\n\\nSo in summary, it defines a high-pass filter class with a constructor to set the cutoff parameter, and an applyFilter method that takes an input signal and returns the high-pass filtered output.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/Fftw1Dimension.java\&quot;:\&quot;This Java file contains code to perform a 1D Fast Fourier Transform (FFT) using the FFTW library.\\n\\nThe key functions are:\\n\\n- calculateFFT(): Takes in a double array of input signal values, performs the FFT and IFFT, and returns a List of arrays containing:\\n  - The original input signal \\n  - The magnitude spectrum from the FFT\\n  - The reconstructed signal from the IFFT\\n\\n- multiplyOnImag(): Multiplies the imaginary part of the FFT input array by -1^n to account for FFTW\\u0027s definition \\n\\n- getSpectrum(): Extracts the magnitude spectrum from the FFT output array \\n\\n- getListFromDFTArray(): Extracts the real part of the FFT/IFFT output array \\n\\n- getScale(): Divides the IFFT output array by the length to scale it \\n\\n- degree(): Returns -1 or 1 depending on if n is even or odd, to multiply the imaginary part \\n\\nIt uses FFTW to perform a 1D forward and inverse FFT on a real input signal. It handles the scaling and twiddle factors needed to work with FFTW\\u0027s conventions for real data FFTs.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/HelloController.java\&quot;:\&quot;This Java file is a controller class for a JavaFX GUI application.\\n\\nIt does the following:\\n\\n1. Imports the necessary FXML and JavaFX packages.\\n\\n2. Defines a HelloController class that will handle events and update the GUI. \\n\\n3. Annotates the welcomeText Label with @FXML - this allows the label to be injected by the FXML loader and linked to the GUI element.\\n\\n4. Defines an onHelloButtonClick() method annotated with @FXML. This method will be called by the FXML loader when a button is clicked to handle the event.\\n\\n5. Inside onHelloButtonClick(), it updates the text of the welcomeText label to display a message. This allows it to dynamically update the GUI in response to user input.\\n\\nSo in summary, the key functions are:\\n\\n- Link the controller to the GUI elements \\n- Handle and respond to user input events \\n- Update the GUI dynamically based on events\\n\\nIt serves as the bridge between the Java code and the FXML markup that defines the GUI structure.\&quot;,\&quot;/src/main/java/module-info.java\&quot;:\&quot;This module-info.java file defines a Java module for the com.example.courseworkgui module.\\n\\nThe key functions of this file are:\\n\\n- Defines the module name as com.example.courseworkgui\\n\\n- Requires (imports) other Java modules that this module depends on - javafx.controls, javafx.fxml, java.desktop, jfreechart, javafx.swing, org.bytedeco.javacpp, org.bytedeco.fftw\\n\\n- Opens the com.example.courseworkgui package to javafx.fxml, allowing FXML documents to access classes in that package. \\n\\n- Exports the com.example.courseworkgui package, making classes in it available to other modules that require this module.\\n\\n- Defines this module and its dependencies, allowing for modular programming and encapsulation of code and dependencies.\\n\\n- Allows for runtime checking of module dependencies during development and at runtime.\\n\\nSo in summary, it defines the module and its required dependencies, and controls access to classes within the module from other code modules. This enables modular code organization and dependency management.\&quot;,\&quot;/pom.xml\&quot;:\&quot;This pom.xml file is the project object model file for a Maven Java project. It defines key information about the project and its dependencies.\\n\\nSome key functions of this pom.xml file:\\n\\n- Defines the groupId, artifactId, version of the project - this identifies the project\\n- Specifies dependencies on JavaFX, JFreeChart and other libraries\\n- Configures the Java compiler plugin to compile to Java 17\\n- Configures the JavaFX maven plugin to allow running the application with \\\&quot;mvn javafx:run\\\&quot;\\n- Sets the main class for the JavaFX application \\n- Configures building a self-contained application package using jlink\\n- Defines properties like the JUnit version\\n- Brings in JUnit dependencies for testing\\n\\nIn summary, it:\\n\\n- Defines the project metadata and dependencies\\n- Configures plugins for compiling, running and packaging the JavaFX application\\n- Allows building and running the project from the command line using Maven\\n\\nSo it provides the configuration needed for Maven to build, test and run the JavaFX application.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/FFT2D.java\&quot;:\&quot;This Java file defines a class called FFT2D that implements a 2D discrete Fourier transform (DFT) using the FFTW library.\\n\\nKey functions:\\n\\n- Constructor - Initializes the height, width, input and output arrays for FFTW.\\n\\n- setImageData() - Sets the input image data into the input array. \\n\\n- getImageData() - Gets the image data back from the input array.\\n\\n- forwardTransform() - Performs a forward DFT transform from the input to output array. \\n\\n- getForwardTransform() - Gets the result of the forward transform.\\n\\n- getSpectrum() - Gets the magnitude spectrum from the output array.\\n\\n- getInverseTransform() - Performs an inverse DFT transform from output to input array. \\n\\n- applyHighPassFilter() - Applies a high-pass filter to the output array.\\n\\n- applyGaussianLowPassFilter() - Applies a Gaussian low-pass filter.\\n\\n- setSpectrum() - Sets a new spectrum in the output array. \\n\\n- cleanup() - Cleans up FFTW resources.\\n\\nSo in summary, it implements the core functions needed to perform a 2D DFT on an image using FFTW, including filtering operations on the frequency domain data.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/ProjectionChart.java\&quot;:\&quot;This file defines a ProjectionChart class that is used to display projection data on a chart.\\n\\nKey functions:\\n\\n- Constructor that takes in ProjectionData object\\n\\n- get/set methods for accessing the ProjectionData and XYSeries objects that hold the data series\\n\\n- showProjection method that:\\n\\n  - Extracts the original, filtered, and prepared projection data from the ProjectionData object\\n\\n  - Creates XYSeries objects for each data series\\n\\n  - Creates a JFreeChart from the XYSeriesCollection\\n\\n  - Displays the chart in a SwingNode embedded in a BorderPane\\n\\nSo in summary, it:\\n\\n1. Holds the projection data \\n2. Can extract the different data series \\n3. Generates a JFreeChart from those series\\n4. Displays the chart in the JavaFX UI\\n\\nIt provides a way to visualize the projection data on a line chart after it has been processed through different filtering/preparation steps.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/ProjectionData.java\&quot;:\&quot;This ProjectionData class is used to load, process and store projection data for a CT reconstruction algorithm.\\n\\nKey functions:\\n\\n- loadProjections(File file) - Loads projection data from a file, storing it in discretP_Experimental array\\n- get/set methods for discretP_Experimental and other properties like N, M, filter settings\\n- prepareProjection(double[] projectionData) - Applies preprocessing steps to a projection:\\n  - Pads with zeros\\n  - Applies Gaussian filter if enabled\\n  - Performs cyclic shift\\n- applyGaussianFilter(double[] data, double cutoffFrequency) - Applies a Gaussian filter convolution to the data\\n\\nThe main responsibilities of this class are:\\n\\n- Loading raw projection data from file \\n- Storing the projection data and metadata\\n- Providing access to the projection data\\n- Applying common preprocessing steps like filtering and shifting to the projections\\n\\nSo in summary, it handles I/O of the projection data and provides methods to access and preprocess the data for use in the reconstruction algorithm.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/TransformData.java\&quot;:\&quot;This Java file defines a class called TransformData that is used to encapsulate and store data after it has been transformed.\\n\\nKey things:\\n\\n- It stores the transformed double[][] data in a private field. \\n\\n- It stores the minimum and maximum values of the data in private fields.\\n\\n- The constructor initializes the fields with the data, min, and max values passed in.\\n\\n- It has getter methods to retrieve the:\\n  - Transformed data\\n  - Minimum value\\n  - Maximum value\\n\\nSo in summary, this class:\\n\\n- Encapsulates transformed data and min/max values \\n- Allows initializing it with a constructor\\n- Provides getter methods to access the stored data\\n\\nThe main purpose is to package up the results of a data transformation in a clean way that hides the internal representation and provides a simple interface to access the transformed values.\&quot;,\&quot;/src/main/java/com/example/courseworkgui/ProjectionViewer.java\&quot;:\&quot;This Java file defines a ProjectionViewer class that allows viewing projections and their FFTs from tomography data.\\n\\nThe key functions are:\\n\\n- start(): Initializes the GUI with controls to load projections, select a projection number, and view/filter options.\\n\\n- loadProjections(): Loads projection data from a file into arrays. \\n\\n- showProjection(): Displays a selected projection number on graphs, along with original, filtered and prepared versions. Also shows the FFT.\\n\\n- prepareProjection(): Applies padding, filtering and cyclic shifting to a projection for FFT.\\n\\n- applyGaussianFilter(): Applies a Gaussian filter to the data.\\n\\n- showFFT(): Calculates and displays the FFT of a projection. \\n\\n- synthesizedSpectrum(): Synthesizes the 2D spectrum from the 1D projections. \\n\\n- scaleArrayN(): Scales array values from 0-255 for image display.\\n\\n- showSynthesizedSpectrum(): Displays the synthesized 2D spectrum as an image.\\n\\nSo in summary, it provides GUI controls to load, view, filter and analyze individual projections from tomography data, including displaying the projections, FFTs and synthesized spectrum. The key functions implement the various processing and display steps.\&quot;}&quot;}" />
  </component>
</project>